import gym
from gym import spaces
from scipy import ndimage as ndi
import cv2
import numpy as np

class SaliencyMap(gym.ObservationWrapper):
    def __init__(self, env: gym.Env, width: int = 84, height: int = 84):
        gym.ObservationWrapper.__init__(self, env)
        self.width = width
        self.height = height
        self.observation_space = spaces.Box(
            low=0, high=255, shape=(self.height, self.width, 1), dtype=env.observation_space.dtype
        )

        # mock saliency map
        self.s_map = np.zeros((84, 84))
        cv2.circle(self.s_map, (30, 42), radius=4, color=1, thickness=1)
        self.s_map = ndi.gaussian_filter(self.s_map, sigma=6)


    def observation(self, frame: np.ndarray) -> np.ndarray:
        """
        returns the current observation combined with a saliency map
        generated by the saliency prediction NN

        :param frame: environment frame
        :return: the observation
        """
        # call to generate saliency map here
        saliency_map = self.s_map
        frame = frame[:, :, 0]
        product = np.multiply(frame, saliency_map)
        frame = np.mean( np.array([ frame, product]), axis=0 )

        return frame
